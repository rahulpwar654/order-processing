spring:
  application:
    name: order

  # Database Configuration
  datasource:
    url: jdbc:h2:mem:ordersdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    driverClassName: org.h2.Driver
    username: sa
    password:
    # Connection pool settings for high performance
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA Configuration with performance optimizations
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        # Enable batch processing for better performance
        jdbc:
          batch_size: 20
          fetch_size: 50
        order_inserts: true
        order_updates: true
        # Second-level cache (optional, disabled by default)
        cache:
          use_second_level_cache: false
    open-in-view: false  # Disable for better performance

  # Redis Configuration
  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      jedis:
        pool:
          max-active: 20
          max-idle: 10
          min-idle: 5
          max-wait: 2000ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      time-to-live: 600000  # 10 minutes default TTL
      cache-null-values: false
      use-key-prefix: true

  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

# H2 Console (Development only)
  h2:
    console:
      enabled: true
      path: /h2-console

# Logging Configuration
logging:
  level:
    root: INFO
    com.example.order: DEBUG
    org.hibernate.SQL: DEBUG
    org.springframework.cache: INFO
    org.springframework.web: DEBUG
    io.micrometer.tracing: DEBUG
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}] [%X{requestId:-}]"
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Server Configuration
server:
  port: 8080
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  tomcat:
    threads:
      max: 200
      min-spare: 10
    connection-timeout: 20000
    max-connections: 10000

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      orderService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 60s
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: 3s
        recordExceptions:
          - org.springframework.dao.DataAccessException
          - java.util.concurrent.TimeoutException
        ignoreExceptions:
          - com.example.order.exception.NotFoundException
          - com.example.order.exception.ConflictException

  ratelimiter:
    instances:
      orderCreate:
        limitForPeriod: 20
        limitRefreshPeriod: 1s
        timeoutDuration: 100ms
      orderUpdate:
        limitForPeriod: 20
        limitRefreshPeriod: 1s
        timeoutDuration: 100ms
      orderQuery:
        limitForPeriod: 200
        limitRefreshPeriod: 1s
        timeoutDuration: 500ms
      orderList:
        limitForPeriod: 200
        limitRefreshPeriod: 1s
        timeoutDuration: 500ms

  timelimiter:
    instances:
      orderService:
        timeoutDuration: 4s
        cancelRunningFuture: true

# Management endpoints for monitoring circuit breaker
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,ratelimiters,prometheus
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: true

  # Micrometer Tracing Configuration
  tracing:
    sampling:
      probability: 1.0  # Sample 100% of requests (adjust in production: 0.1 = 10%)

  # Metrics export configuration
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      application: ${spring.application.name}

# Micrometer Tracing
tracing:
  zipkin:
    endpoint: http://localhost:9411/api/v2/spans
    enabled: true



